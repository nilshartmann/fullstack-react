/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ArticlesRouteImport } from './routes/articles/route'
import { Route as ArticlesIndexImport } from './routes/articles/index'

// Create/Update Routes

const ArticlesRouteRoute = ArticlesRouteImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesIndexRoute = ArticlesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ArticlesRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/articles': {
      id: '/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticlesRouteImport
      parentRoute: typeof rootRoute
    }
    '/articles/': {
      id: '/articles/'
      path: '/'
      fullPath: '/articles/'
      preLoaderRoute: typeof ArticlesIndexImport
      parentRoute: typeof ArticlesRouteImport
    }
  }
}

// Create and export the route tree

interface ArticlesRouteRouteChildren {
  ArticlesIndexRoute: typeof ArticlesIndexRoute
}

const ArticlesRouteRouteChildren: ArticlesRouteRouteChildren = {
  ArticlesIndexRoute: ArticlesIndexRoute,
}

const ArticlesRouteRouteWithChildren = ArticlesRouteRoute._addFileChildren(
  ArticlesRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/articles': typeof ArticlesRouteRouteWithChildren
  '/articles/': typeof ArticlesIndexRoute
}

export interface FileRoutesByTo {
  '/articles': typeof ArticlesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/articles': typeof ArticlesRouteRouteWithChildren
  '/articles/': typeof ArticlesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/articles' | '/articles/'
  fileRoutesByTo: FileRoutesByTo
  to: '/articles'
  id: '__root__' | '/articles' | '/articles/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ArticlesRouteRoute: typeof ArticlesRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ArticlesRouteRoute: ArticlesRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/articles"
      ]
    },
    "/articles": {
      "filePath": "articles/route.tsx",
      "children": [
        "/articles/"
      ]
    },
    "/articles/": {
      "filePath": "articles/index.tsx",
      "parent": "/articles"
    }
  }
}
ROUTE_MANIFEST_END */
